datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-1.1.x", "linux-musl-arm64-openssl-3.0.x"]
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  hashedPassword String?
  sessions       Session[]
  projects       Project[]
  clients        Client[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  passwordResetToken String? @unique
  passwordResetTokenExpiresAt DateTime?
  Comment        Comment[]
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      String    @default("active")
  budget      Float?
  dueDate     DateTime?
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  songs       Song[]
  clients     Client[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Client {
  id         String    @id @default(cuid())
  name       String
  email       String    @unique
  phone      String?
  artistname String?
  imageUrl   String?
  projects   Project[]
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Song {
  id         String      @id @default(cuid())
  name       String
  project    Project     @relation(fields: [projectId], references: [id])
  projectId  String
  variations Variation[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Variation {
  id        String    @id @default(cuid())
  name      String
  url       String
  song      Song      @relation(fields: [songId], references: [id])
  songId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  author      String?
  email       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  variation   Variation @relation(fields: [variationId], references: [id])
  variationId String
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?
}
